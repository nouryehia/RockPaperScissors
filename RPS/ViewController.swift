/* ViewController.swift
   RPS
   Created by Nour Yehia on 8/1/18.
   Copyright Â© 2018 Nour Yehia. All rights reserved. */

import UIKit

class ViewController: UIViewController {
    
    // Declare outlets.
    @IBOutlet weak var appSign: UILabel!
    @IBOutlet weak var gameStatus: UILabel!
    @IBOutlet weak var rockButton: UIButton!
    @IBOutlet weak var paperButton: UIButton!
    @IBOutlet weak var scissorsButton: UIButton!
    @IBOutlet weak var playAgainButton: UIButton!

    // Called once the view controller has loaded its view hierarchy into memory.
    override func viewDidLoad() {
        super.viewDidLoad()
        // Load the 'start' game state onto the screen.
        updateUI(gameState: .start)
    }
    
    // Go through with the round based on the user's choice when one of the buttons is tapped.
    @IBAction func rockButtonTapped(_ sender: Any) {
        play(sign: .rock)
    }
    @IBAction func paperButtonTapped(_ sender: Any) {
        play(sign: .paper)
    }
    @IBAction func scissorsButtonTapped(_ sender: Any) {
        play(sign: .scissors)
    }
    
    // Load the 'start' game state when the play again button is tapped.
    @IBAction func playAgainButtonTapped(_ sender: Any) {
        updateUI(gameState: .start)
    }
    
    // Goes through a round of RPS based on sign chosen by user and sign generated by computer.
    func play(sign: Sign) {
        // Assign a randomly generated sign to computer.
        let opponent = randomSign()
        // Generate outcome of round.
        let gameState = sign.gameState(opponent: opponent)
        updateUI(gameState: gameState)
        // Display oponent's sign.
        appSign.text = opponent.emoji
        
        // Hide the buttons.
        rockButton.isEnabled = false
        rockButton.isHidden = true
        paperButton.isEnabled = false
        paperButton.isHidden = true
        scissorsButton.isEnabled = false
        scissorsButton.isHidden = true
        
        // Display chosen sign.
        switch sign {
        case .paper:
            paperButton.isHidden = false
        case .rock:
            rockButton.isHidden = false
        case .scissors:
            scissorsButton.isHidden = false
        }
        
        // Show play again button.
        playAgainButton.isEnabled = true
        playAgainButton.isHidden = false
    }
    
    // Updates the interface based on game state.
    func updateUI(gameState: GameState) {
        // Update label.
        gameStatus.text = gameState.status
        switch gameState {
        // Reset to default screen at start of round.
        case .start:
            appSign.text = "ðŸ¤–"
            rockButton.isEnabled = true
            rockButton.isHidden = false
            paperButton.isEnabled = true
            paperButton.isHidden = false
            scissorsButton.isEnabled = true
            scissorsButton.isHidden = false
            playAgainButton.isEnabled = false
            playAgainButton.isHidden = true
            view.backgroundColor = .white
        // Make the background green if win.
        case .win:
            view.backgroundColor = .green
        // Make the background red if loss.
        case .lose:
            view.backgroundColor = .red
        // Make the background light gray if draw.
        case .draw:
            view.backgroundColor = .lightGray
        }
    }
}
